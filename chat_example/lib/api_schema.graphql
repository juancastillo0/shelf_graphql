type Query {
  searchUser(name: String!): [User!]!
  getMessage(chatId: Int): [ChatMessage!]!
  getChatRooms: [ChatRoom!]!
}

type User {
  sessions: [UserSession!]!
  id: Int!
  name: String
  createdAt: Date!
}

type UserSession {
  id: ID!
  userId: Int!
  userAgent: String
  platform: String
  appVersion: String
  isActive: Boolean!
  createdAt: Date!
}

"""An ISO-8601 Date."""
scalar Date

type ChatMessage {
  id: Int!
  chatId: Int!
  userId: Int!
  message: String!
  referencedMessageId: Int
  createdAt: Date!
  referencedMessage: ChatMessage
}

type ChatRoom {
  id: Int!
  name: String!
  createdAt: Date!
  messages: [ChatMessage!]!
  users: [ChatRoomUser!]!
}

type ChatRoomUser {
  user: User!
  userId: Int!
  chatId: Int!
  role: ChatRoomUserRole!
}

enum ChatRoomUserRole {
  admin
  peer
}

type Mutation {
  refreshAuthToken: String
  signUp(name: String!, password: String!): ResultTokenWithUserErrCSignUpError!
  signIn(name: String, password: String): ResultTokenWithUserErrCSignInError!
  signOut: String
  addChatRoomUser(chatId: Int!, userId: Int!, role: ChatRoomUserRole! = peer): ChatRoomUser
  deleteChatRoomUser(chatId: Int!, userId: Int!): Boolean!
  sendMessage(chatId: Int!, message: String!, referencedMessageId: Int): ChatMessage
  createChatRoom(name: String!): ChatRoom
  deleteChatRoom(id: Int!): Boolean!
}

"""
TokenWithUser when the operation was successful or ErrCSignUpError when an error was encountered.
"""
union ResultTokenWithUserErrCSignUpError = TokenWithUser | ErrCSignUpError

type TokenWithUser {
  accessToken: String!
  refreshToken: String!
  expiresInSecs: Int!
  user: User!
}

type ErrCSignUpError {
  message: String
  value: SignUpError!
}

enum SignUpError {
  nameTaken
  alreadySignedUp
  unknown
}

"""
TokenWithUser when the operation was successful or ErrCSignInError when an error was encountered.
"""
union ResultTokenWithUserErrCSignInError = TokenWithUser | ErrCSignInError

type ErrCSignInError {
  message: String
  value: SignInError!
}

enum SignInError {
  wrong
  unknown
  alreadySignedIn
}

type Subscription {
  onMessageSent(chatId: Int!): [ChatMessage!]!
  onMessageEvent(type: EventType!): DBEvent!
}

type DBEvent {
  id: Int!
  type: EventType!
  data: String!
  createdAt: Date!
}

enum EventType {
  messageSent
}